(** Standard state. *)

(** The operations for accessing and modifyng state *)
operation get : unit -> int
operation put : int -> unit

(** Another set of operations, used when we combined several states *)
operation get' : unit -> int
operation put' : int -> unit

(** A signal used for the cohandler that only allows positive integers *)
signal negative of int

(** Basic state *)
let state =
  {
  | get () -> getenv
  | put x -> setenv x
  } @ int

(** A copy of state with renamed operations *)
let state' = state as {get'=get, put'=put}

(** State that only allows non-negative integers to be stored *)
let positive_state =
  {
  | get _ @ w -> (w, w)
  | put w @ _ -> if w < 0 then negative w else ((), w)
  } @ int

(** This is how we use ordinary state, initialized with 1 *)
let demo1 =
  using state @ 1 run
    let a = get () in
    put 2 ;
    let b = get () in
    put 3 ;
    (a, b)
  finally { return x @ _ -> x }

let state2 = state ⊗ state'

(** Combine two states together, each has its own state *)
let demo2 =
  using state ⊗ state' @ (2, 3) run
    let a = get' () in
    put 3 ;
    put' (a + 10) ;
    let b = get' () in
    (a, b)
  finally { return x @ w -> (x, w) }

(* Combine two copies of state, one of which only allows positive values. *)
let demo3 =
  using state' ⊗ positive_state @ (0, 2) run
    let a = get' () in
    put 3 ;
    put' (a + 10) ;
    let b = get' () in
    (a, b)
  finally {
  | return x @ w -> (x, w)
  | negative k @ w -> ((0, k), w)
  }

(* Combine two copies of state, one of which only allows positive values,
   trigger a signal. *)
let demo3' =
  using state' ⊗ positive_state @ (0, 2) run
    let a = get' () in
    put 3 ;
    put' (a + 10) ;
    let b = get' () in
    put (-1) ;
    (a, b)
  finally {
  | return x @ w -> (x, w)
  | negative k @ w -> ((666, k), w)
  }
