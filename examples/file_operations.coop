(** Basic file usage. *)

(** In order to get access to file operations we first have
    to install the [file] container at the top level.
    We also use printing, so we install [stdio] as well. *)
container stdio, file ;;

(** We now have access to OCaml's basic file operations, consult
    [pervasives.coop] and [src/external.ml] for details. So we could
    write traditional code, like this. Should [output_string] fail
    with the [sys_error] exception, the file will not get closed. *)
let demo1 =
  try
    let fh = open_out "greeting1.txt" in
    output_string fh "Hello, world!\n" ;
    close_out fh
  with {
  | !sys_error msg -> print_string msg }
;;

(** We re-make the above example using a runner, which guarantees proper
   finalization. *)

(** The runner implements an auxiliary operation which does not require a file handle,
    and does not raise any I/O exceptions. Instead, if an I/O error occurs, it
    closes the file and raises a signal. *)
signal sys_kill of string ;;
operation write : string -> unit ;;

(* Note that [close_out] may raise a further [sys_error]. *)
let fileIO = {
  write s ->
    let fh = getenv in
    user
      output_string fh s
    with { !sys_error msg ->
             (user close_out fh with { !sys_error _ -> () }) ;
             !!sys_kill msg }
} @ out_channel

let demo2 =
try
  using fileIO @ (open_out "greeting2.txt")
  run
    write "Hello, world!\n"
  finally {
  | return _ @ fh -> close_out fh
  | !!sys_kill msg -> print_string msg }
with { !sys_error msg -> print_string msg (* open_out failed *) }
;;

(** By nesting runners, we may interpose another runner [accIO] between the user
   code and [fileIO] that accumulates all the writes and commits them at the
   end. *)
let accIO = { write s -> let s' = getenv in setenv (user (s' ^ s) with {}) } @ string

let demo3 =
try
  using fileIO @ (open_out "greeting3.txt")
  run
    using accIO @ ""
    run
      write "Hell" ;
      write "o, wor" ;
      write "ld!\n"
    finally {
    | return x @ s -> write s ; x (* commit writes *) }
  finally {
  | return _ @ fh -> close_out fh
  | !!sys_kill msg -> print_string msg }
with { !sys_error msg -> print_string msg (* open_out failed *) }
;;

(** Another use for interposing a runner is to collect various kinds of
    statistics about resource usage. *)
let report_stats (k : int) =
  (print_string "Statistics: " ; print_int k ; print_string " calls to write.\n")
;;

let demo4 =
try
  using fileIO @ (open_out "greeting4.txt")
  run
      using ({ write s -> let k = getenv in setenv (user k + 1 with {})} @ int) @ 0
      run
        write "Hell" ;
        write "o, wor" ;
        write "ld!" ;
        write "\n"
      finally { return x @ k -> (x, k) }
  finally {
  | return (x, k) @ fh -> close_out fh ; report_stats k ; x
  | !!sys_kill msg -> print_string msg }
with { !sys_error msg -> print_string msg (* open_out failed *) }
;;
