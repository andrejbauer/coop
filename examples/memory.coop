(** ML style references *)

(** The type of memory cells. Ideally we would like this to be a polymorphic type. *)
type cell = int

(** The type of memory locations. Ideally we would liek this to an abstract type. *)
type location = Location of int

(** We first implement a naive memory heap holding integers. It is a kernel map
   [int -> int @ heap] with a counter for the next available location. Invalid
   dereferencing results in a [segfault] signal. *)
signal segfault of location

type heap = Heap of int * (location -> cell {!!segfault} @ heap)

let empty_heap = Heap (0, (fun (l : location) @ heap -> !!segfault l))

let read_heap (l : location) @ heap =
  let (Heap (_, h)) = getenv in h l

let write_heap (l : location) (c : cell) @ heap =
  let (Heap (hp, h)) = getenv in
  let h' (k : location) @ heap = (if l = k then c else h k) in
  setenv (Heap (hp, h'))

(** To make using the heap more dangerous, allocation of a new heap cell
    does not initialize it. *)
let alloc_heap (_ : unit) @ heap =
  let (Heap (hp, h)) = getenv in
  let hp' = (user hp + 1 with {}) in
  setenv (Heap (hp', h)) ;
  Location hp

(** We implement ML-style references using the primitive heap. *)
resource ref : cell -> location
resource get : location -> cell
resource put : location * cell -> unit

let ml_ref =
  { ref x -> let r = alloc_heap () in write_heap r x ; r
  | get r -> read_heap r
  | put (r, x) -> write_heap r x
  } @ heap

container stdio ;;

(** Now we can use ML-style references as follows. *)
let demo1 =
  using ml_ref @ empty_heap
  run
    let r = ref 5 in
    put (r, 2 + get r) ;
    let q = ref (get r) in
    get q * get r
  finally {
  | return x @ _ -> x
  | !!segfault (Location k) ->
     print_string "SEGFAULT at " ; print_int k ;
     666
  }
;;

(** Because locations are not abstract we can cheat, which can lead to a segfault. *)
let demo2 =
  using ml_ref @ empty_heap
  run
    let r = ref 5 in
    put (r, 2 + get r) ;
    let q = ref (get (Location 0)) in
    get q * get (Location 42)
  finally {
  | return x @ _ -> x
  | !!segfault (Location k) ->
     print_string "SEGFAULT at " ; print_int k ; print_string "\n" ;
     666
  }
;;

(** Let us implement a runner which enforces monotonic state, i.e., a policy that
    only allows certain memory updates. Rather than changing the ml_ref runner,
    we write another one which then combines with ml_ref (or any other implementation
    of references). *)

(** A policy tells us whether a reference may be updated. Think of it is a preorder,
    so that we can only ever "increase" the contents of a reference. *)
type policy = cell -> cell -> bool

(** Raised when a policiy is violated. *)
exception policy_violation of location

(** Sent when a reference without a policy is used. *)
signal no_policy of location

(** The monotonic versions of ref operations. *)
resource mref : cell * policy -> location
resource mget : location -> cell
resource mput : location * cell -> unit {!policy_violation}

(** A map that checks policies. *)
type policy_checker = Checker of (location * cell -> unit {get, !policy_violation, !!no_policy} @ policy_checker)

let empty_checker = Checker (fun ((l, _) : location * cell) @ policy_checker -> !!no_policy l)
;;

let update_checker (l : location) (p : policy) @ policy_checker =
  let (Checker f) = getenv in
  let f' ((l', c) : location * cell) @ policy_checker =
    if l = l' then
      if (user p (get l) c with {}) then () else !policy_violation l
    else
      f (l, c)
  in
  setenv (Checker f')
;;

(** A runner for monotone state *)
let ml_mref = {
  | mref (x, p) -> let r = ref x in update_checker r p ; r
  | mget r -> get r
  | mput (r, x) ->
     let (Checker c) = getenv in
     c (r, x) ;
     put (r, x)
} @ policy_checker ;;

(** An auxiliary runner that we pair with other runners so that
    inner printing operations get access to their outer implementation. *)
let printer =
  { print_string s -> print_string s
  | print_int k -> print_int k
  } @ unit

let demo3 =
  using (ml_ref ⋈ printer) @ (empty_heap, ())
  run
    using (ml_mref ⋈ printer) @ (empty_checker, ())
    run
        let x = mref (5, ( < )) in
        mput (x, 6) ;
        mput (x, 4) ;
        mget x
    finally {
     | return x @ _ -> x
     | !policy_violation (Location l) @ _ ->
        print_string "POLICY VIOLATION " ; print_int l ; print_string "\n" ;
        666
     | !!no_policy (Location l) ->
        print_string "NO POLICY " ; print_int l ; print_string "\n" ;
        42
    }
  finally {
  | return x @ _ -> x
  | !!segfault _ -> print_string "SEGFAULT\n" ; 666
  }
