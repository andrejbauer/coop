(** We define two runners, one for recording an IO interaction,
    and one for replaying it. *)

type io_action =
  | PrintInt of int
  | PrintString of string
  | ReadInt of int
  | ReadString of string
  | Flush

type io_record =
  | Nil
  | Cons of io_action * io_record

let reverse (r : io_record) =
  let rec rev (acc : io_record) : io_record -> io_record =
    fun (r : io_record) ->
    match r with {
    | Nil -> acc
    | Cons (a, r) -> rev (Cons (a, acc)) r
    }
  in
  rev Nil r

let io_recorder =
  {
  | print_int k -> print_int k ; setenv (Cons (PrintInt k, getenv))
  | print_string s -> print_string s ; setenv (Cons (PrintString s, getenv))
  | read_int () -> let k = read_int () in setenv (Cons (ReadInt k, getenv)) ; k
  | read_string () -> let s = read_string () in setenv (Cons (ReadString s, getenv)) ; s
  | flush_stdout () -> flush_stdout () ; setenv (Cons (Flush, getenv))
  } @ io_record

signal sync_error of unit

let io_player =
  {

  | print_int k ->
      match getenv with {
      | Cons (PrintInt m, r) ->
        if k = m then
          print_string "DEBUG PRINT: " ; print_int k ; flush_stdout () ;
          setenv r
        else
          !!sync_error ()
      | _ -> !!sync_error ()
      }

   | print_string s ->
      match getenv with {
      | Cons (PrintString t, r) ->
        if s = t then
           print_string "DEBUG PRINT: " ; print_string s ; flush_stdout () ;
           setenv r
        else
           !!sync_error ()
      | _ -> !!sync_error ()
      }

   | read_int () ->
      match getenv with {
      | Cons (ReadInt k, r) ->
           print_string "DEBUG READ: " ; print_int k ; flush_stdout () ;
           setenv r ;
           k
      | _ -> !!sync_error ()
      }

   | read_string () ->
      match getenv with {
      | Cons (ReadString s, r) ->
           print_string "DEBUG READ: " ; print_string s ; flush_stdout () ;
           setenv r ;
           s
      | _ -> !!sync_error ()
      }

    | flush_stdout () ->
      match getenv with {
      | Cons (Flush, r) ->
           print_string "DEBUG FLUSH" ; flush_stdout () ;
           setenv r
      | _ -> !!sync_error ()
      }
  } @ io_record

let conversation1 (_ : unit) =
  print_string "What is your name?" ;
  let s = read_string () in
  print_string ("Hello " ^ s ^ " what is your age?") ;
  let k = read_int () in
  print_string "I wish you " ;
  print_int (100 - k) ;
  print_string " more years of happy life." ;
  flush_stdout ()
;;

let conversation2 (_ : unit) =
  print_string "What is your name?" ;
  let s = read_string () in
  print_string ("Hello " ^ s ^ " what is your age?") ;
  let k = read_int () in
  print_string "Oh well." ;
  ()
;;

container stdio ;;

let demo =
  let r =
    using io_recorder @ Nil run
      conversation1 ()
    finally {
    | return _ @ r -> reverse r
    | !malformed_integer _ @ _ -> !malformed_integer ()
    }
  in
    using io_player @ r run
      conversation2 ()
    finally {
    | return v @ r -> ()
    | !malformed_integer _ @ _ -> !malformed_integer ()
    | !!sync_error () -> print_string "DEBUG: sync_error occurred\n"
    }
