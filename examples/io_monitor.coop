(** We define two cohandlers, one for recording an IO interaction,
    and one for replaing it. *)

operation print_int : int -> unit

type io_action =
  | PrintInt of int
  | PrintString of string
  | ReadInt of int
  | ReadString of string
  | Flush

type io_record =
  | Nil
  | Cons of io_action * io_record

let reverse (r : io_record) =
  let rec rev (acc : io_record) (r : io_record) : io_record =
    match r with {
    | Nil -> acc
    | Cons (a, r) -> rev (Cons (a, acc)) r
    }
  in
  rev Nil r

let io_recorder =
  runner {
  | print_int k @ r -> print_value k ; ((), Cons (PrintInt k, r))
  | print_string s @ r -> print_string s ; ((), Cons (PrintString s, r))
  | read_int () @ r -> let k = read_int () in (k, Cons (ReadInt k, r))
  | read_string () @ r -> let s = read_string () in (s, Cons (ReadString s, r))
  | flush () @ r -> flush () ; ((), Cons (Flush, r))
  } @ io_record

signal sync_error of unit

let io_player =
  runner {

  | print_int k @ r ->
      match r with {
      | Cons (PrintInt m, r) ->
        if k = m then
          print_string "DEBUG PRINT: " ; print_value k ; flush () ;
          ((), r)
        else
          sync_error ()
      | _ -> sync_error ()
      }

   | print_string s @ r ->
      match r with {
      | Cons (PrintString t, r) ->
        if s = t then
           print_string "DEBUG PRINT: " ; print_string s ; flush () ;
           ((), r)
        else
           sync_error ()
      | _ -> sync_error ()
      }

   | read_int () @ r ->
      match r with {
      | Cons (ReadInt k, r) ->
           print_string "DEBUG READ: " ; print_value k ; flush () ;
           (k, r)
      | _ -> sync_error ()
      }

   | read_string () @ r ->
      match r with {
      | Cons (ReadString s, r) ->
           print_string "DEBUG READ: " ; print_string s ; flush () ;
           (s, r)
      | _ -> sync_error ()
      }

    | flush () @ r ->
      match r with {
      | Cons (Flush, r) ->
           print_string "DEBUG FLUSH" ; flush () ;
           ((), r)
      | _ -> sync_error ()
      }
  } @ io_record

let conversation1 (_ : unit) =
  print_string "What is your name?" ;
  let s = read_string () in
  print_string ("Hello " ^ s ^ " what is your age?") ;
  let k = read_int () in
  print_string "I wish you " ;
  print_int (100 - k) ;
  print_string " more years of happy life." ;
  flush ()
;;

let conversation2 (_ : unit) =
  print_string "What is your name?" ;
  let s = read_string () in
  print_string ("Hello " ^ s ^ " what is your age?") ;
  let k = read_int () in
  print_string "Oh well." ;
  ()
;;

using stdio ;;

let demo =
  let r =
    using io_recorder @ Nil run
      conversation1 ()
    finally { val _ @ r -> reverse r }
  in
    using io_player @ r run
      conversation2 ()
    finally {
    | val v @ r -> (v, r)
    | sync_error () @ _ -> sync_error ()
    }
