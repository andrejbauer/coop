(* Simulate writing to a file where the disk becomes full. *)

(* A file is a list of integers. *)
type file = Nil | Cons of int * file

(* The size of a file *)
let rec length (f : file) : int =
  match f with
  | Nil -> 0
  | Cons (_, f) -> 1 + length f
  end

operation write : int -> unit

signal disk_full of unit

(** A file writer that is full after n writes. *)
let file_writer (n : int) =
  cohandler file with
  | write k @ w ->
     if length w >= n then
       disk_full ()
     else
       ((), Cons (k, w))
  end

let job (_ : unit) =
    write 1 ;
    write 2 ;
    write 3 ;
    write 4 ;
    write 5 ;
    write 6

let demo1 =
  use file_writer 10 @ Nil in
    job ()
  finally
  | val _ @ f -> f
  | disk_full _ @ f -> f
  end

let demo2 =
  use file_writer 3 @ Nil in
    job ()
  finally
  | val _ @ f -> f
  | disk_full _ @ f -> f
  end
