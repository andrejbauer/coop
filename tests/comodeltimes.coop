operation get : unit -> int
operation put : int -> unit

operation get' : unit -> int
operation put' : int -> unit

operation tick : unit -> int

let state =
  {
  | get t -> getenv
  | put x -> setenv x
  } @ int

let ticker =
  { tick () ->
      let k = getenv in
      setenv (user k + 1 with {}) ;
      k 
  } @ int

let c = state âŠ— ticker

let demo1 =
  using c @ (10, 0) run
    let a = get () in
    put 2 ;
    let b = tick () in
    let c = tick () in
    put 3 ;
    (a, b, c)
  finally { return x @ w -> (x, w) }

let demo2 =
  using state :*: (state as {get'=get, put'=put}) @ (2, 3) run
    let a = get () in
    put' (a + 3) ;
    put 7 ;
    let b = get' () in
    put' (b + 10) ;
    (a, b)
  finally { return x @ w -> (x, w) }
