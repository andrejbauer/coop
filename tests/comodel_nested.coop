operation get : unit -> int
operation put : int -> unit
operation tick : unit -> int

let state =
  cohandler int with
  | get t @ w -> (w, w)
  | put x @ w -> ((), x)
  end

(* A ticker which uses state to tick *)
let ticker =
  cohandler unit with
  | tick () @ () ->
     let x = get () in
     put (x + 1) ;
     (x, ())
  end

let demo =
  use state @ 5 in
    use ticker @ () in
      let a = tick () in
      let b = tick () in
      let c = tick () in
      (a, b, c)
    finally
      val v @ _ -> v
    end
  finally
    val v @ w -> (v, w)
  end
