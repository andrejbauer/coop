operation op : int -> int
signal die of unit
signal croak of int

let apply (h : int -> int ! {op, die}) (n : int) = h n

let g (n : int) =
  if n > 0 then op n else die ()

let c (w0 : int) =
  cohandler w0 with
  | op k @ w ->
      if k > 10 then croak w else (w, k + w)
  end

let demo (n : int) =
  using c 1 in
    let a = apply g n in
    let b = apply g n in
    (1000 + a, 1000 + b)
  finally
  | val x @ w -> (x, w)
  | croak k @ w -> ((k,-1), w)
  | die () @ w -> die ()
  end
;;

demo 2 ;;

using (cohandler ()  with end) in
  demo (-3)
finally
  | val x @ _ -> 42
  | die () @ _ -> 23
end
;;

demo 20 ;;

