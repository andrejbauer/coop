resource op : int -> int
exception die of unit
signal croak of int

let apply (h : int -> int {op, !die}) (n : int) = h n

let g (n : int) =
  if n > 0 then op n else !die ()

let c =
  { op k ->  if (user k > 10 with {}) then !!croak getenv else let w = getenv in setenv (user k + w with {}) ; w } @ int

let demo (n : int) =
  using c @ 1 run
    let a = apply g n in
    let b = apply g n in
    (1000 + a, 1000 + b)
  finally {
  | return x @ w -> (x, w)
  | !!croak k -> ((k,-1), 666)
  | !die () @ w -> !die ()
  }
;;

demo 2 ;;

using ({} @ unit) @ () run
  demo (-3)
finally {
  | return x @ _ -> 42
  | !die () @ _ -> 23
}
;;

demo 20 ;;

